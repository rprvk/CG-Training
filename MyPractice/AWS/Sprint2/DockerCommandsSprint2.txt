FROM DOCKER DESKTOP

1 docker -v
2 docker run --name some-postgres -p 5432:5432 -e POSTGRES_PASSWORD=rprvk3 -d postgres
3 docker images
4 docker ps
5 docker build -t hrms . or docker build -t rprvk/hrms .
6 docker image ls
7 docker run <ImageId> or docker run -p 8097:8097 <imageId>
8 docker push rprvk/hrms
9 docker pull <image url from docker hub>
______________________________________________________________________

FROM UBUNTU INSTANCE

go to location where pem file is there

ssh -i <file.pem> ubuntu@<AWS_instanceId>
sudo -i

sudo apt-get install     ca-certificates     curl     gnupg     lsb-release

curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

sudo apt-get update

sudo apt-get install docker-ce docker-ce-cli containerd.io

docker --version
docker ps

javac
apt-install default-jdk
java --version

apt install maven
mvn --version
git --version
   
docker run --name some-postgres -p 5432:5432 -e POSTGRES_PASSWORD=rprvk3 -d postgres
docker ps

#in security group open 5432 port number and 8080 in our instance

#next we will clone our application from github
ls
git init
git add .
git commit -m "Intial Project"
git remote add origin https://github.com/gopal1409/spring.git
git push
git push --set-upstream origin master
git clone https://github.com/gopal1409/spring.git
cd spring   #to go to spring directory 
  
#now we will conver the application into a jar file

mvn clean package -DskipTests
docker images
docker build -t hrms .
docker image ls
docker run <ImageId> or docker run -p 8097:8097 <imageId>